THREE.DrcobjLoader=function(){function DrcobjLoader(manager){this.manager=void 0!==manager?manager:THREE.DefaultLoadingManager}DrcobjLoader.prototype.setPath=function(value){this.path=value},DrcobjLoader.prototype.setResourcePath=function(value){this.resourcePath=value},DrcobjLoader.prototype.setDecoderPath=function(value){this.decoderPath=value},DrcobjLoader.prototype.load=function(url,onLoad,onJsonDataProgress,onProgress,onDecodeProgress,onError){var self=this,path=void 0===this.path?extractUrlBase(url):this.path;this.resourcePath=this.resourcePath||path;var fileLoader=new THREE.FileLoader(self.manager);fileLoader.setPath(self.path),fileLoader.setResponseType("arraybuffer"),fileLoader.load(url,function(buffer){self.parse(buffer,onLoad,onJsonDataProgress,onDecodeProgress)},onProgress,onError)},DrcobjLoader.prototype.parse=function(buffer,onLoad,onJsonDataProgress,onDecodeProgress,isInflate){var self=this;void 0===self.objectLoader&&(self.objectLoader=new THREE.ObjectLoader),self.objectLoader.setResourcePath(this.resourcePath),void 0===self.dracoLoader&&(self.dracoLoader=new THREE.DRACOLoader,self.dracoLoader.setDecoderPath(self.decoderPath),self.dracoLoader.setDecoderConfig({type:"wasm"}),self.dracoLoader.setWorkerLimit(8)),isInflate&&(buffer=new Zlib.Inflate(new Uint8Array(buffer)).decompress().buffer);var modelDataSize=new Uint32Array(buffer,0,1)[0],modelData=new Uint8Array(buffer,4,modelDataSize),jsonData=JSON.parse(THREE.LoaderUtils.decodeText(modelData));onJsonDataProgress&&onJsonDataProgress(jsonData);var geometryBufferStart,geometryBufferEnd,geometryBuffer,finishCount=0,geometriesDataOffset=4+modelDataSize;function decode(i){geometryBufferStart=geometriesDataOffset+jsonData.geometries[i].data.offset,geometryBufferEnd=geometryBufferStart+jsonData.geometries[i].data.byteLength,geometryBuffer=buffer.slice(geometryBufferStart,geometryBufferEnd),self.dracoLoader.decodeDracoFile(geometryBuffer,function(geometry){jsonData.geometries[i].data=geometry.toJSON().data,++finishCount,onDecodeProgress&&onDecodeProgress(finishCount/jsonData.geometries.length*100),finishCount===jsonData.geometries.length&&onLoad(self.objectLoader.parse(jsonData))})}for(var i=0;i<jsonData.geometries.length;i++)decode(i)},DrcobjLoader.prototype.dispose=function(){this.dracoLoader.dispose()};var extractUrlBase=function(url){var index=url.lastIndexOf("/");return-1===index?"./":url.substr(0,index+1)};return DrcobjLoader}();